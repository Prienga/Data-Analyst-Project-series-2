# -*- coding: utf-8 -*-
"""weather_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KC1PGeAA0WpIQ83DBsDEitzCW0xvnCOh

Part 1: Loading the Data
"""

import pandas as pd

# Load the dataset
df = pd.read_csv("weatherHistory.csv")

# Display basic information about the dataset
print("Basic Information:")
print(df.info())
print("Summary Statistics:")
print(df.describe())
print("First Few Rows:")
print(df.head())

"""Part 2: Handling Missing Values"""

# Check for missing values
print("Missing values before handling:")
print(df.isnull().sum())

# Handle missing values
# For numerical columns, fill missing values with the mean
numerical_columns = df.select_dtypes(include=[np.number]).columns
df[numerical_columns] = df[numerical_columns].fillna(df[numerical_columns].mean())

# For non-numerical columns, fill missing values with the mode
non_numerical_columns = df.select_dtypes(exclude=[np.number]).columns
df[non_numerical_columns] = df[non_numerical_columns].apply(lambda x: x.fillna(x.mode()[0]))

print("Missing values after handling:")
print(df.isnull().sum())
print(df.info())
print(df.head())

"""Part 3: Handling Outliers with IQR Method"""

import numpy as np

# Function to detect outliers using IQR
def remove_outliers_iqr(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Apply the IQR method to numerical columns
for column in numerical_columns:
    df = remove_outliers_iqr(df, column)

print("Data after removing outliers:")
print(df.info())
print(df.describe())
print(df.head())

"""Part 4: Checking for Other Inconsistencies"""

# Verify column names
print("Column names:", df.columns)

if 'temperature' in df.columns:
    # Replace unrealistic temperature values with NaN, then drop these rows
    df.loc[df['temperature'] < -50, 'temperature'] = np.nan
    df_final = df.dropna()
else:
    print("Column 'temperature' does not exist in the dataset.")
    df_final = df

print("Data after handling other inconsistencies:")
print(df_final.info())
print(df_final.describe())
print(df_final.head())

# Save the cleaned dataset
df_final.to_csv("cleaned_weather_data2.csv", index=False)

print("Data cleaning complete. Cleaned data saved as 'cleaned_weather_data.csv'.")